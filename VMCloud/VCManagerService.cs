//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//     
//     WebService更新时间:2019/07/30 15:23
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using System.Net;

// 
// 此源代码由 wsdl 自动生成, Version=4.7.3081.0。
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="VCManagerServiceSoapBinding", Namespace="http://vm.manager.buaa.edu.cn/VCManager")]
public partial class VCManagerService : System.Web.Services.Protocols.SoapHttpClientProtocol {

    //protected override WebRequest GetWebRequest(Uri uri)
    //{
        //HttpWebRequest webRequest = (HttpWebRequest)base.GetWebRequest(uri);
        //webRequest.KeepAlive = false;
        //return webRequest;
    //}

    private System.Threading.SendOrPostCallback AddUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback LinkCloneOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetVMUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetVMInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback AssignUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddHostToDataCenterOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateFromTemplateOperationCompleted;
    
    private System.Threading.SendOrPostCallback RenameVirtualMachineOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangePasswordForUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback ConvertToTemplateOperationCompleted;
    
    private System.Threading.SendOrPostCallback ConvertToVirtualMachineOperationCompleted;
    
    private System.Threading.SendOrPostCallback RunGuestProgramOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetVMListOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExportVMOperationCompleted;
    
    private System.Threading.SendOrPostCallback SnapShotOpsOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
    
    private System.Threading.SendOrPostCallback OVFExportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetHostInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback BasicOpsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLicenseInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetStorageInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangeConfigOperationCompleted;
    
    /// <remarks/>
    public VCManagerService() {
        this.Url = ConfigurationManager.AppSettings["WebServiceAddress"];
    }
    
    /// <remarks/>
    public event AddUserCompletedEventHandler AddUserCompleted;
    
    /// <remarks/>
    public event LinkCloneCompletedEventHandler LinkCloneCompleted;
    
    /// <remarks/>
    public event GetVMUserCompletedEventHandler GetVMUserCompleted;
    
    /// <remarks/>
    public event GetVMInfoCompletedEventHandler GetVMInfoCompleted;
    
    /// <remarks/>
    public event AssignUserCompletedEventHandler AssignUserCompleted;
    
    /// <remarks/>
    public event AddHostToDataCenterCompletedEventHandler AddHostToDataCenterCompleted;
    
    /// <remarks/>
    public event CreateFromTemplateCompletedEventHandler CreateFromTemplateCompleted;
    
    /// <remarks/>
    public event RenameVirtualMachineCompletedEventHandler RenameVirtualMachineCompleted;
    
    /// <remarks/>
    public event ChangePasswordForUserCompletedEventHandler ChangePasswordForUserCompleted;
    
    /// <remarks/>
    public event ConvertToTemplateCompletedEventHandler ConvertToTemplateCompleted;
    
    /// <remarks/>
    public event ConvertToVirtualMachineCompletedEventHandler ConvertToVirtualMachineCompleted;
    
    /// <remarks/>
    public event RunGuestProgramCompletedEventHandler RunGuestProgramCompleted;
    
    /// <remarks/>
    public event GetVMListCompletedEventHandler GetVMListCompleted;
    
    /// <remarks/>
    public event ExportVMCompletedEventHandler ExportVMCompleted;
    
    /// <remarks/>
    public event SnapShotOpsCompletedEventHandler SnapShotOpsCompleted;
    
    /// <remarks/>
    public event UploadFileCompletedEventHandler UploadFileCompleted;
    
    /// <remarks/>
    public event OVFExportCompletedEventHandler OVFExportCompleted;
    
    /// <remarks/>
    public event GetHostInfoCompletedEventHandler GetHostInfoCompleted;
    
    /// <remarks/>
    public event BasicOpsCompletedEventHandler BasicOpsCompleted;
    
    /// <remarks/>
    public event GetLicenseInfoCompletedEventHandler GetLicenseInfoCompleted;
    
    /// <remarks/>
    public event GetStorageInfoCompletedEventHandler GetStorageInfoCompleted;
    
    /// <remarks/>
    public event ChangeConfigCompletedEventHandler ChangeConfigCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("AddUserReturn")]
    public string AddUser([System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)] string[] user, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)] string[] pass) {
        object[] results = this.Invoke("AddUser", new object[] {
                    user,
                    pass});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddUser(string[] user, string[] pass, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddUser", new object[] {
                    user,
                    pass}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndAddUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void AddUserAsync(string[] user, string[] pass) {
        this.AddUserAsync(user, pass, null);
    }
    
    /// <remarks/>
    public void AddUserAsync(string[] user, string[] pass, object userState) {
        if ((this.AddUserOperationCompleted == null)) {
            this.AddUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserOperationCompleted);
        }
        this.InvokeAsync("AddUser", new object[] {
                    user,
                    pass}, this.AddUserOperationCompleted, userState);
    }
    
    private void OnAddUserOperationCompleted(object arg) {
        if ((this.AddUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddUserCompleted(this, new AddUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("LinkCloneReturn")]
    public string LinkClone(string deskName, string hostName, string diskName, string number) {
        object[] results = this.Invoke("LinkClone", new object[] {
                    deskName,
                    hostName,
                    diskName,
                    number});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLinkClone(string deskName, string hostName, string diskName, string number, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LinkClone", new object[] {
                    deskName,
                    hostName,
                    diskName,
                    number}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndLinkClone(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void LinkCloneAsync(string deskName, string hostName, string diskName, string number) {
        this.LinkCloneAsync(deskName, hostName, diskName, number, null);
    }
    
    /// <remarks/>
    public void LinkCloneAsync(string deskName, string hostName, string diskName, string number, object userState) {
        if ((this.LinkCloneOperationCompleted == null)) {
            this.LinkCloneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkCloneOperationCompleted);
        }
        this.InvokeAsync("LinkClone", new object[] {
                    deskName,
                    hostName,
                    diskName,
                    number}, this.LinkCloneOperationCompleted, userState);
    }
    
    private void OnLinkCloneOperationCompleted(object arg) {
        if ((this.LinkCloneCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LinkCloneCompleted(this, new LinkCloneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("GetVMUserReturn")]
    public string GetVMUser([System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)] string[] machineNames) {
        object[] results = this.Invoke("GetVMUser", new object[] {
                    machineNames});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetVMUser(string[] machineNames, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetVMUser", new object[] {
                    machineNames}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetVMUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetVMUserAsync(string[] machineNames) {
        this.GetVMUserAsync(machineNames, null);
    }
    
    /// <remarks/>
    public void GetVMUserAsync(string[] machineNames, object userState) {
        if ((this.GetVMUserOperationCompleted == null)) {
            this.GetVMUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVMUserOperationCompleted);
        }
        this.InvokeAsync("GetVMUser", new object[] {
                    machineNames}, this.GetVMUserOperationCompleted, userState);
    }
    
    private void OnGetVMUserOperationCompleted(object arg) {
        if ((this.GetVMUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetVMUserCompleted(this, new GetVMUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("GetVMInfoReturn")]
    public string GetVMInfo(string name) {
        object[] results = this.Invoke("GetVMInfo", new object[] {
                    name});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetVMInfo(string name, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetVMInfo", new object[] {
                    name}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetVMInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetVMInfoAsync(string name) {
        this.GetVMInfoAsync(name, null);
    }
    
    /// <remarks/>
    public void GetVMInfoAsync(string name, object userState) {
        if ((this.GetVMInfoOperationCompleted == null)) {
            this.GetVMInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVMInfoOperationCompleted);
        }
        this.InvokeAsync("GetVMInfo", new object[] {
                    name}, this.GetVMInfoOperationCompleted, userState);
    }
    
    private void OnGetVMInfoOperationCompleted(object arg) {
        if ((this.GetVMInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetVMInfoCompleted(this, new GetVMInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("AssignUserReturn")]
    public string AssignUser(string desk, string machine, string user) {
        object[] results = this.Invoke("AssignUser", new object[] {
                    desk,
                    machine,
                    user});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAssignUser(string desk, string machine, string user, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AssignUser", new object[] {
                    desk,
                    machine,
                    user}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndAssignUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void AssignUserAsync(string desk, string machine, string user) {
        this.AssignUserAsync(desk, machine, user, null);
    }
    
    /// <remarks/>
    public void AssignUserAsync(string desk, string machine, string user, object userState) {
        if ((this.AssignUserOperationCompleted == null)) {
            this.AssignUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignUserOperationCompleted);
        }
        this.InvokeAsync("AssignUser", new object[] {
                    desk,
                    machine,
                    user}, this.AssignUserOperationCompleted, userState);
    }
    
    private void OnAssignUserOperationCompleted(object arg) {
        if ((this.AssignUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AssignUserCompleted(this, new AssignUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("AddHostToDataCenterReturn")]
    public string AddHostToDataCenter(string userName, string password, string ipOrName) {
        object[] results = this.Invoke("AddHostToDataCenter", new object[] {
                    userName,
                    password,
                    ipOrName});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddHostToDataCenter(string userName, string password, string ipOrName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddHostToDataCenter", new object[] {
                    userName,
                    password,
                    ipOrName}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndAddHostToDataCenter(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void AddHostToDataCenterAsync(string userName, string password, string ipOrName) {
        this.AddHostToDataCenterAsync(userName, password, ipOrName, null);
    }
    
    /// <remarks/>
    public void AddHostToDataCenterAsync(string userName, string password, string ipOrName, object userState) {
        if ((this.AddHostToDataCenterOperationCompleted == null)) {
            this.AddHostToDataCenterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHostToDataCenterOperationCompleted);
        }
        this.InvokeAsync("AddHostToDataCenter", new object[] {
                    userName,
                    password,
                    ipOrName}, this.AddHostToDataCenterOperationCompleted, userState);
    }
    
    private void OnAddHostToDataCenterOperationCompleted(object arg) {
        if ((this.AddHostToDataCenterCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddHostToDataCenterCompleted(this, new AddHostToDataCenterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("CreateFromTemplateReturn")]
    public string CreateFromTemplate(string templateName, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)] string[] vmNameList, string adminID, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)] string[] studentIDList, string teacherID, string isExperimental, string cpuNum, string memoryMb, string diskSizeMb, string hostName, string IPAddress) {
        object[] results = this.Invoke("CreateFromTemplate", new object[] {
                    templateName,
                    vmNameList,
                    adminID,
                    studentIDList,
                    teacherID,
                    isExperimental,
                    cpuNum,
                    memoryMb,
                    diskSizeMb,
                    hostName,
                    IPAddress});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateFromTemplate(string templateName, string[] vmNameList, string adminID, string[] studentIDList, string teacherID, string isExperimental, string cpuNum, string memoryMb, string diskSizeMb, string hostName, string IPAddress, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateFromTemplate", new object[] {
                    templateName,
                    vmNameList,
                    adminID,
                    studentIDList,
                    teacherID,
                    isExperimental,
                    cpuNum,
                    memoryMb,
                    diskSizeMb,
                    hostName,
                    IPAddress}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCreateFromTemplate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CreateFromTemplateAsync(string templateName, string[] vmNameList, string adminID, string[] studentIDList, string teacherID, string isExperimental, string cpuNum, string memoryMb, string diskSizeMb, string hostName, string IPAddress) {
        this.CreateFromTemplateAsync(templateName, vmNameList, adminID, studentIDList, teacherID, isExperimental, cpuNum, memoryMb, diskSizeMb, hostName, IPAddress, null);
    }
    
    /// <remarks/>
    public void CreateFromTemplateAsync(string templateName, string[] vmNameList, string adminID, string[] studentIDList, string teacherID, string isExperimental, string cpuNum, string memoryMb, string diskSizeMb, string hostName, string IPAddress, object userState) {
        if ((this.CreateFromTemplateOperationCompleted == null)) {
            this.CreateFromTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFromTemplateOperationCompleted);
        }
        this.InvokeAsync("CreateFromTemplate", new object[] {
                    templateName,
                    vmNameList,
                    adminID,
                    studentIDList,
                    teacherID,
                    isExperimental,
                    cpuNum,
                    memoryMb,
                    diskSizeMb,
                    hostName,
                    IPAddress}, this.CreateFromTemplateOperationCompleted, userState);
    }
    
    private void OnCreateFromTemplateOperationCompleted(object arg) {
        if ((this.CreateFromTemplateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateFromTemplateCompleted(this, new CreateFromTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("RenameVirtualMachineReturn")]
    public string RenameVirtualMachine(string vmName, string newName) {
        object[] results = this.Invoke("RenameVirtualMachine", new object[] {
                    vmName,
                    newName});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRenameVirtualMachine(string vmName, string newName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RenameVirtualMachine", new object[] {
                    vmName,
                    newName}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndRenameVirtualMachine(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void RenameVirtualMachineAsync(string vmName, string newName) {
        this.RenameVirtualMachineAsync(vmName, newName, null);
    }
    
    /// <remarks/>
    public void RenameVirtualMachineAsync(string vmName, string newName, object userState) {
        if ((this.RenameVirtualMachineOperationCompleted == null)) {
            this.RenameVirtualMachineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameVirtualMachineOperationCompleted);
        }
        this.InvokeAsync("RenameVirtualMachine", new object[] {
                    vmName,
                    newName}, this.RenameVirtualMachineOperationCompleted, userState);
    }
    
    private void OnRenameVirtualMachineOperationCompleted(object arg) {
        if ((this.RenameVirtualMachineCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RenameVirtualMachineCompleted(this, new RenameVirtualMachineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("ChangePasswordForUserReturn")]
    public string ChangePasswordForUser(string user, string password) {
        object[] results = this.Invoke("ChangePasswordForUser", new object[] {
                    user,
                    password});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangePasswordForUser(string user, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangePasswordForUser", new object[] {
                    user,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndChangePasswordForUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ChangePasswordForUserAsync(string user, string password) {
        this.ChangePasswordForUserAsync(user, password, null);
    }
    
    /// <remarks/>
    public void ChangePasswordForUserAsync(string user, string password, object userState) {
        if ((this.ChangePasswordForUserOperationCompleted == null)) {
            this.ChangePasswordForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordForUserOperationCompleted);
        }
        this.InvokeAsync("ChangePasswordForUser", new object[] {
                    user,
                    password}, this.ChangePasswordForUserOperationCompleted, userState);
    }
    
    private void OnChangePasswordForUserOperationCompleted(object arg) {
        if ((this.ChangePasswordForUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangePasswordForUserCompleted(this, new ChangePasswordForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("ConvertToTemplateReturn")]
    public string ConvertToTemplate(string vmName) {
        object[] results = this.Invoke("ConvertToTemplate", new object[] {
                    vmName});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginConvertToTemplate(string vmName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ConvertToTemplate", new object[] {
                    vmName}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndConvertToTemplate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ConvertToTemplateAsync(string vmName) {
        this.ConvertToTemplateAsync(vmName, null);
    }
    
    /// <remarks/>
    public void ConvertToTemplateAsync(string vmName, object userState) {
        if ((this.ConvertToTemplateOperationCompleted == null)) {
            this.ConvertToTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertToTemplateOperationCompleted);
        }
        this.InvokeAsync("ConvertToTemplate", new object[] {
                    vmName}, this.ConvertToTemplateOperationCompleted, userState);
    }
    
    private void OnConvertToTemplateOperationCompleted(object arg) {
        if ((this.ConvertToTemplateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ConvertToTemplateCompleted(this, new ConvertToTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("ConvertToVirtualMachineReturn")]
    public string ConvertToVirtualMachine(string vmName, string hostname, string ipaddress) {
        object[] results = this.Invoke("ConvertToVirtualMachine", new object[] {
                    vmName,
                    hostname,
                    ipaddress});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginConvertToVirtualMachine(string vmName, string hostname, string ipaddress, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ConvertToVirtualMachine", new object[] {
                    vmName,
                    hostname,
                    ipaddress}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndConvertToVirtualMachine(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ConvertToVirtualMachineAsync(string vmName, string hostname, string ipaddress) {
        this.ConvertToVirtualMachineAsync(vmName, hostname, ipaddress, null);
    }
    
    /// <remarks/>
    public void ConvertToVirtualMachineAsync(string vmName, string hostname, string ipaddress, object userState) {
        if ((this.ConvertToVirtualMachineOperationCompleted == null)) {
            this.ConvertToVirtualMachineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertToVirtualMachineOperationCompleted);
        }
        this.InvokeAsync("ConvertToVirtualMachine", new object[] {
                    vmName,
                    hostname,
                    ipaddress}, this.ConvertToVirtualMachineOperationCompleted, userState);
    }
    
    private void OnConvertToVirtualMachineOperationCompleted(object arg) {
        if ((this.ConvertToVirtualMachineCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ConvertToVirtualMachineCompleted(this, new ConvertToVirtualMachineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("RunGuestProgramReturn")]
    public string RunGuestProgram(string vmName, string fileDir, string args) {
        object[] results = this.Invoke("RunGuestProgram", new object[] {
                    vmName,
                    fileDir,
                    args});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRunGuestProgram(string vmName, string fileDir, string args, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RunGuestProgram", new object[] {
                    vmName,
                    fileDir,
                    args}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndRunGuestProgram(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void RunGuestProgramAsync(string vmName, string fileDir, string args) {
        this.RunGuestProgramAsync(vmName, fileDir, args, null);
    }
    
    /// <remarks/>
    public void RunGuestProgramAsync(string vmName, string fileDir, string args, object userState) {
        if ((this.RunGuestProgramOperationCompleted == null)) {
            this.RunGuestProgramOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunGuestProgramOperationCompleted);
        }
        this.InvokeAsync("RunGuestProgram", new object[] {
                    vmName,
                    fileDir,
                    args}, this.RunGuestProgramOperationCompleted, userState);
    }
    
    private void OnRunGuestProgramOperationCompleted(object arg) {
        if ((this.RunGuestProgramCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RunGuestProgramCompleted(this, new RunGuestProgramCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("GetVMListReturn")]
    public string GetVMList(string adminID, string studentID, string teacherID, string isExperimental) {
        object[] results = this.Invoke("GetVMList", new object[] {
                    adminID,
                    studentID,
                    teacherID,
                    isExperimental});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetVMList(string adminID, string studentID, string teacherID, string isExperimental, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetVMList", new object[] {
                    adminID,
                    studentID,
                    teacherID,
                    isExperimental}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetVMList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetVMListAsync(string adminID, string studentID, string teacherID, string isExperimental) {
        this.GetVMListAsync(adminID, studentID, teacherID, isExperimental, null);
    }
    
    /// <remarks/>
    public void GetVMListAsync(string adminID, string studentID, string teacherID, string isExperimental, object userState) {
        if ((this.GetVMListOperationCompleted == null)) {
            this.GetVMListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVMListOperationCompleted);
        }
        this.InvokeAsync("GetVMList", new object[] {
                    adminID,
                    studentID,
                    teacherID,
                    isExperimental}, this.GetVMListOperationCompleted, userState);
    }
    
    private void OnGetVMListOperationCompleted(object arg) {
        if ((this.GetVMListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetVMListCompleted(this, new GetVMListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("ExportVMReturn")]
    public string ExportVM(string vmName, string targetDir) {
        object[] results = this.Invoke("ExportVM", new object[] {
                    vmName,
                    targetDir});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginExportVM(string vmName, string targetDir, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExportVM", new object[] {
                    vmName,
                    targetDir}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndExportVM(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ExportVMAsync(string vmName, string targetDir) {
        this.ExportVMAsync(vmName, targetDir, null);
    }
    
    /// <remarks/>
    public void ExportVMAsync(string vmName, string targetDir, object userState) {
        if ((this.ExportVMOperationCompleted == null)) {
            this.ExportVMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportVMOperationCompleted);
        }
        this.InvokeAsync("ExportVM", new object[] {
                    vmName,
                    targetDir}, this.ExportVMOperationCompleted, userState);
    }
    
    private void OnExportVMOperationCompleted(object arg) {
        if ((this.ExportVMCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExportVMCompleted(this, new ExportVMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("SnapShotOpsReturn")]
    public string SnapShotOps(string vmName, string op, string snapshotname, string desc, string removechild) {
        object[] results = this.Invoke("SnapShotOps", new object[] {
                    vmName,
                    op,
                    snapshotname,
                    desc,
                    removechild});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSnapShotOps(string vmName, string op, string snapshotname, string desc, string removechild, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SnapShotOps", new object[] {
                    vmName,
                    op,
                    snapshotname,
                    desc,
                    removechild}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSnapShotOps(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SnapShotOpsAsync(string vmName, string op, string snapshotname, string desc, string removechild) {
        this.SnapShotOpsAsync(vmName, op, snapshotname, desc, removechild, null);
    }
    
    /// <remarks/>
    public void SnapShotOpsAsync(string vmName, string op, string snapshotname, string desc, string removechild, object userState) {
        if ((this.SnapShotOpsOperationCompleted == null)) {
            this.SnapShotOpsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSnapShotOpsOperationCompleted);
        }
        this.InvokeAsync("SnapShotOps", new object[] {
                    vmName,
                    op,
                    snapshotname,
                    desc,
                    removechild}, this.SnapShotOpsOperationCompleted, userState);
    }
    
    private void OnSnapShotOpsOperationCompleted(object arg) {
        if ((this.SnapShotOpsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SnapShotOpsCompleted(this, new SnapShotOpsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("UploadFileReturn")]
    public string UploadFile(string vmName, string username, string password, string guestType, string host, string filePathLocal, string filePathInGuest) {
        object[] results = this.Invoke("UploadFile", new object[] {
                    vmName,
                    username,
                    password,
                    guestType,
                    host,
                    filePathLocal,
                    filePathInGuest});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUploadFile(string vmName, string username, string password, string guestType, string host, string filePathLocal, string filePathInGuest, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadFile", new object[] {
                    vmName,
                    username,
                    password,
                    guestType,
                    host,
                    filePathLocal,
                    filePathInGuest}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndUploadFile(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void UploadFileAsync(string vmName, string username, string password, string guestType, string host, string filePathLocal, string filePathInGuest) {
        this.UploadFileAsync(vmName, username, password, guestType, host, filePathLocal, filePathInGuest, null);
    }
    
    /// <remarks/>
    public void UploadFileAsync(string vmName, string username, string password, string guestType, string host, string filePathLocal, string filePathInGuest, object userState) {
        if ((this.UploadFileOperationCompleted == null)) {
            this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
        }
        this.InvokeAsync("UploadFile", new object[] {
                    vmName,
                    username,
                    password,
                    guestType,
                    host,
                    filePathLocal,
                    filePathInGuest}, this.UploadFileOperationCompleted, userState);
    }
    
    private void OnUploadFileOperationCompleted(object arg) {
        if ((this.UploadFileCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("OVFExportReturn")]
    public string OVFExport(string vmName, string host, string localpath) {
        object[] results = this.Invoke("OVFExport", new object[] {
                    vmName,
                    host,
                    localpath});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginOVFExport(string vmName, string host, string localpath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("OVFExport", new object[] {
                    vmName,
                    host,
                    localpath}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndOVFExport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void OVFExportAsync(string vmName, string host, string localpath) {
        this.OVFExportAsync(vmName, host, localpath, null);
    }
    
    /// <remarks/>
    public void OVFExportAsync(string vmName, string host, string localpath, object userState) {
        if ((this.OVFExportOperationCompleted == null)) {
            this.OVFExportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOVFExportOperationCompleted);
        }
        this.InvokeAsync("OVFExport", new object[] {
                    vmName,
                    host,
                    localpath}, this.OVFExportOperationCompleted, userState);
    }
    
    private void OnOVFExportOperationCompleted(object arg) {
        if ((this.OVFExportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.OVFExportCompleted(this, new OVFExportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("GetHostInfoReturn")]
    public string GetHostInfo() {
        object[] results = this.Invoke("GetHostInfo", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetHostInfo(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetHostInfo", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetHostInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetHostInfoAsync() {
        this.GetHostInfoAsync(null);
    }
    
    /// <remarks/>
    public void GetHostInfoAsync(object userState) {
        if ((this.GetHostInfoOperationCompleted == null)) {
            this.GetHostInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHostInfoOperationCompleted);
        }
        this.InvokeAsync("GetHostInfo", new object[0], this.GetHostInfoOperationCompleted, userState);
    }
    
    private void OnGetHostInfoOperationCompleted(object arg) {
        if ((this.GetHostInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetHostInfoCompleted(this, new GetHostInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("BasicOpsReturn")]
    public string BasicOps(string vmName, string Op) {
        object[] results = this.Invoke("BasicOps", new object[] {
                    vmName,
                    Op});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBasicOps(string vmName, string Op, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BasicOps", new object[] {
                    vmName,
                    Op}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndBasicOps(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void BasicOpsAsync(string vmName, string Op) {
        this.BasicOpsAsync(vmName, Op, null);
    }
    
    /// <remarks/>
    public void BasicOpsAsync(string vmName, string Op, object userState) {
        if ((this.BasicOpsOperationCompleted == null)) {
            this.BasicOpsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBasicOpsOperationCompleted);
        }
        this.InvokeAsync("BasicOps", new object[] {
                    vmName,
                    Op}, this.BasicOpsOperationCompleted, userState);
    }
    
    private void OnBasicOpsOperationCompleted(object arg) {
        if ((this.BasicOpsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.BasicOpsCompleted(this, new BasicOpsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("GetLicenseInfoReturn")]
    public string GetLicenseInfo() {
        object[] results = this.Invoke("GetLicenseInfo", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLicenseInfo(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLicenseInfo", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetLicenseInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetLicenseInfoAsync() {
        this.GetLicenseInfoAsync(null);
    }
    
    /// <remarks/>
    public void GetLicenseInfoAsync(object userState) {
        if ((this.GetLicenseInfoOperationCompleted == null)) {
            this.GetLicenseInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseInfoOperationCompleted);
        }
        this.InvokeAsync("GetLicenseInfo", new object[0], this.GetLicenseInfoOperationCompleted, userState);
    }
    
    private void OnGetLicenseInfoOperationCompleted(object arg) {
        if ((this.GetLicenseInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLicenseInfoCompleted(this, new GetLicenseInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("GetStorageInfoReturn")]
    public string GetStorageInfo() {
        object[] results = this.Invoke("GetStorageInfo", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetStorageInfo(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetStorageInfo", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetStorageInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetStorageInfoAsync() {
        this.GetStorageInfoAsync(null);
    }
    
    /// <remarks/>
    public void GetStorageInfoAsync(object userState) {
        if ((this.GetStorageInfoOperationCompleted == null)) {
            this.GetStorageInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStorageInfoOperationCompleted);
        }
        this.InvokeAsync("GetStorageInfo", new object[0], this.GetStorageInfoOperationCompleted, userState);
    }
    
    private void OnGetStorageInfoOperationCompleted(object arg) {
        if ((this.GetStorageInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetStorageInfoCompleted(this, new GetStorageInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://vm.manager.buaa.edu.cn/VCManager", ResponseNamespace="http://vm.manager.buaa.edu.cn/VCManager", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("ChangeConfigReturn")]
    public string ChangeConfig(string vmName, string cpuNum, string memoryMb, string diskName, string diskSizeMb, string diskMode, string adminID, string studentID, string teacherID, string isExperimental) {
        object[] results = this.Invoke("ChangeConfig", new object[] {
                    vmName,
                    cpuNum,
                    memoryMb,
                    diskName,
                    diskSizeMb,
                    diskMode,
                    adminID,
                    studentID,
                    teacherID,
                    isExperimental});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangeConfig(string vmName, string cpuNum, string memoryMb, string diskName, string diskSizeMb, string diskMode, string adminID, string studentID, string teacherID, string isExperimental, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangeConfig", new object[] {
                    vmName,
                    cpuNum,
                    memoryMb,
                    diskName,
                    diskSizeMb,
                    diskMode,
                    adminID,
                    studentID,
                    teacherID,
                    isExperimental}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndChangeConfig(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ChangeConfigAsync(string vmName, string cpuNum, string memoryMb, string diskName, string diskSizeMb, string diskMode, string adminID, string studentID, string teacherID, string isExperimental) {
        this.ChangeConfigAsync(vmName, cpuNum, memoryMb, diskName, diskSizeMb, diskMode, adminID, studentID, teacherID, isExperimental, null);
    }
    
    /// <remarks/>
    public void ChangeConfigAsync(string vmName, string cpuNum, string memoryMb, string diskName, string diskSizeMb, string diskMode, string adminID, string studentID, string teacherID, string isExperimental, object userState) {
        if ((this.ChangeConfigOperationCompleted == null)) {
            this.ChangeConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeConfigOperationCompleted);
        }
        this.InvokeAsync("ChangeConfig", new object[] {
                    vmName,
                    cpuNum,
                    memoryMb,
                    diskName,
                    diskSizeMb,
                    diskMode,
                    adminID,
                    studentID,
                    teacherID,
                    isExperimental}, this.ChangeConfigOperationCompleted, userState);
    }
    
    private void OnChangeConfigOperationCompleted(object arg) {
        if ((this.ChangeConfigCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangeConfigCompleted(this, new ChangeConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void AddUserCompletedEventHandler(object sender, AddUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void LinkCloneCompletedEventHandler(object sender, LinkCloneCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LinkCloneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LinkCloneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void GetVMUserCompletedEventHandler(object sender, GetVMUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetVMUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetVMUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void GetVMInfoCompletedEventHandler(object sender, GetVMInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetVMInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetVMInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void AssignUserCompletedEventHandler(object sender, AssignUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AssignUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AssignUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void AddHostToDataCenterCompletedEventHandler(object sender, AddHostToDataCenterCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddHostToDataCenterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddHostToDataCenterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void CreateFromTemplateCompletedEventHandler(object sender, CreateFromTemplateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateFromTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateFromTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void RenameVirtualMachineCompletedEventHandler(object sender, RenameVirtualMachineCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RenameVirtualMachineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RenameVirtualMachineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void ChangePasswordForUserCompletedEventHandler(object sender, ChangePasswordForUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangePasswordForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangePasswordForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void ConvertToTemplateCompletedEventHandler(object sender, ConvertToTemplateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ConvertToTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ConvertToTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void ConvertToVirtualMachineCompletedEventHandler(object sender, ConvertToVirtualMachineCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ConvertToVirtualMachineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ConvertToVirtualMachineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void RunGuestProgramCompletedEventHandler(object sender, RunGuestProgramCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RunGuestProgramCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RunGuestProgramCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void GetVMListCompletedEventHandler(object sender, GetVMListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetVMListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetVMListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void ExportVMCompletedEventHandler(object sender, ExportVMCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ExportVMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ExportVMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void SnapShotOpsCompletedEventHandler(object sender, SnapShotOpsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SnapShotOpsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SnapShotOpsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void OVFExportCompletedEventHandler(object sender, OVFExportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class OVFExportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal OVFExportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void GetHostInfoCompletedEventHandler(object sender, GetHostInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetHostInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetHostInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void BasicOpsCompletedEventHandler(object sender, BasicOpsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class BasicOpsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal BasicOpsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void GetLicenseInfoCompletedEventHandler(object sender, GetLicenseInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetLicenseInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLicenseInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void GetStorageInfoCompletedEventHandler(object sender, GetStorageInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetStorageInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetStorageInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
public delegate void ChangeConfigCompletedEventHandler(object sender, ChangeConfigCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.3081.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangeConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangeConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
