//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace VMCloud.VCManager {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://vm.manager.buaa.edu.cn/VCManager", ConfigurationName="VCManager.VCManager")]
    public interface VCManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetVMInfoReturn")]
        string GetVMInfo(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetVMInfoReturn")]
        System.Threading.Tasks.Task<string> GetVMInfoAsync(string name);
        
        // CODEGEN: 参数“user”需要其他方案信息，使用参数模式无法捕获这些信息。特定特性为“System.Xml.Serialization.XmlArrayAttribute”。
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="AddUserReturn")]
        VMCloud.VCManager.AddUserResponse AddUser(VMCloud.VCManager.AddUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<VMCloud.VCManager.AddUserResponse> AddUserAsync(VMCloud.VCManager.AddUserRequest request);
        
        // CODEGEN: 参数“machineNames”需要其他方案信息，使用参数模式无法捕获这些信息。特定特性为“System.Xml.Serialization.XmlArrayAttribute”。
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetVMUserReturn")]
        VMCloud.VCManager.GetVMUserResponse GetVMUser(VMCloud.VCManager.GetVMUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<VMCloud.VCManager.GetVMUserResponse> GetVMUserAsync(VMCloud.VCManager.GetVMUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="LinkCloneReturn")]
        string LinkClone(string deskName, string hostName, string diskName, string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="LinkCloneReturn")]
        System.Threading.Tasks.Task<string> LinkCloneAsync(string deskName, string hostName, string diskName, string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="AssignUserReturn")]
        string AssignUser(string desk, string machine, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="AssignUserReturn")]
        System.Threading.Tasks.Task<string> AssignUserAsync(string desk, string machine, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="BasicOpsReturn")]
        string BasicOps(string vmName, string Op);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="BasicOpsReturn")]
        System.Threading.Tasks.Task<string> BasicOpsAsync(string vmName, string Op);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="OVFExportReturn")]
        string OVFExport(string vmName, string host, string localpath);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="OVFExportReturn")]
        System.Threading.Tasks.Task<string> OVFExportAsync(string vmName, string host, string localpath);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetStorageInfoReturn")]
        string GetStorageInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetStorageInfoReturn")]
        System.Threading.Tasks.Task<string> GetStorageInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetVMListReturn")]
        string GetVMList(string adminID, string studentID, string teacherID, string isExperimental);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetVMListReturn")]
        System.Threading.Tasks.Task<string> GetVMListAsync(string adminID, string studentID, string teacherID, string isExperimental);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ExportVMReturn")]
        string ExportVM(string vmName, string targetDir);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ExportVMReturn")]
        System.Threading.Tasks.Task<string> ExportVMAsync(string vmName, string targetDir);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetHostInfoReturn")]
        string GetHostInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetHostInfoReturn")]
        System.Threading.Tasks.Task<string> GetHostInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="SnapShotOpsReturn")]
        string SnapShotOps(string vmName, string op, string snapshotname, string desc, string removechild);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="SnapShotOpsReturn")]
        System.Threading.Tasks.Task<string> SnapShotOpsAsync(string vmName, string op, string snapshotname, string desc, string removechild);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ChangeConfigReturn")]
        string ChangeConfig(string vmName, string cpuNum, string memoryMb, string diskName, string diskSizeMb, string diskMode, string adminID, string studentID, string teacherID, string isExperimental);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ChangeConfigReturn")]
        System.Threading.Tasks.Task<string> ChangeConfigAsync(string vmName, string cpuNum, string memoryMb, string diskName, string diskSizeMb, string diskMode, string adminID, string studentID, string teacherID, string isExperimental);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetLicenseInfoReturn")]
        string GetLicenseInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetLicenseInfoReturn")]
        System.Threading.Tasks.Task<string> GetLicenseInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="RunGuestProgramReturn")]
        string RunGuestProgram(string vmName, string fileDir, string args);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="RunGuestProgramReturn")]
        System.Threading.Tasks.Task<string> RunGuestProgramAsync(string vmName, string fileDir, string args);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="UploadFileReturn")]
        string UploadFile(string vmName, string username, string password, string guestType, string host, string filePathLocal, string filePathInGuest);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="UploadFileReturn")]
        System.Threading.Tasks.Task<string> UploadFileAsync(string vmName, string username, string password, string guestType, string host, string filePathLocal, string filePathInGuest);
        
        // CODEGEN: 参数“vmNameList”需要其他方案信息，使用参数模式无法捕获这些信息。特定特性为“System.Xml.Serialization.XmlArrayAttribute”。
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="CreateFromTemplateReturn")]
        VMCloud.VCManager.CreateFromTemplateResponse CreateFromTemplate(VMCloud.VCManager.CreateFromTemplateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<VMCloud.VCManager.CreateFromTemplateResponse> CreateFromTemplateAsync(VMCloud.VCManager.CreateFromTemplateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ConvertToTemplateReturn")]
        string ConvertToTemplate(string vmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ConvertToTemplateReturn")]
        System.Threading.Tasks.Task<string> ConvertToTemplateAsync(string vmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="AddHostToDataCenterReturn")]
        string AddHostToDataCenter(string userName, string password, string ipOrName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="AddHostToDataCenterReturn")]
        System.Threading.Tasks.Task<string> AddHostToDataCenterAsync(string userName, string password, string ipOrName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ChangePasswordForUserReturn")]
        string ChangePasswordForUser(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ChangePasswordForUserReturn")]
        System.Threading.Tasks.Task<string> ChangePasswordForUserAsync(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ConvertToVirtualMachineReturn")]
        string ConvertToVirtualMachine(string vmName, string hostname, string ipaddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ConvertToVirtualMachineReturn")]
        System.Threading.Tasks.Task<string> ConvertToVirtualMachineAsync(string vmName, string hostname, string ipaddress);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddUser", WrapperNamespace="http://vm.manager.buaa.edu.cn/VCManager", IsWrapped=true)]
    public partial class AddUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute()]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] user;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute()]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] pass;
        
        public AddUserRequest() {
        }
        
        public AddUserRequest(string[] user, string[] pass) {
            this.user = user;
            this.pass = pass;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddUserResponse", WrapperNamespace="http://vm.manager.buaa.edu.cn/VCManager", IsWrapped=true)]
    public partial class AddUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string AddUserReturn;
        
        public AddUserResponse() {
        }
        
        public AddUserResponse(string AddUserReturn) {
            this.AddUserReturn = AddUserReturn;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetVMUser", WrapperNamespace="http://vm.manager.buaa.edu.cn/VCManager", IsWrapped=true)]
    public partial class GetVMUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute()]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] machineNames;
        
        public GetVMUserRequest() {
        }
        
        public GetVMUserRequest(string[] machineNames) {
            this.machineNames = machineNames;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetVMUserResponse", WrapperNamespace="http://vm.manager.buaa.edu.cn/VCManager", IsWrapped=true)]
    public partial class GetVMUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string GetVMUserReturn;
        
        public GetVMUserResponse() {
        }
        
        public GetVMUserResponse(string GetVMUserReturn) {
            this.GetVMUserReturn = GetVMUserReturn;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFromTemplate", WrapperNamespace="http://vm.manager.buaa.edu.cn/VCManager", IsWrapped=true)]
    public partial class CreateFromTemplateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string templateName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute()]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] vmNameList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string adminID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        [System.Xml.Serialization.XmlArrayAttribute()]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] studentIDList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public string teacherID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public string isExperimental;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=6)]
        public string cpuNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=7)]
        public string memoryMb;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=8)]
        public string diskSizeMb;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=9)]
        public string hostName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=10)]
        public string IPAddress;
        
        public CreateFromTemplateRequest() {
        }
        
        public CreateFromTemplateRequest(string templateName, string[] vmNameList, string adminID, string[] studentIDList, string teacherID, string isExperimental, string cpuNum, string memoryMb, string diskSizeMb, string hostName, string IPAddress) {
            this.templateName = templateName;
            this.vmNameList = vmNameList;
            this.adminID = adminID;
            this.studentIDList = studentIDList;
            this.teacherID = teacherID;
            this.isExperimental = isExperimental;
            this.cpuNum = cpuNum;
            this.memoryMb = memoryMb;
            this.diskSizeMb = diskSizeMb;
            this.hostName = hostName;
            this.IPAddress = IPAddress;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFromTemplateResponse", WrapperNamespace="http://vm.manager.buaa.edu.cn/VCManager", IsWrapped=true)]
    public partial class CreateFromTemplateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string CreateFromTemplateReturn;
        
        public CreateFromTemplateResponse() {
        }
        
        public CreateFromTemplateResponse(string CreateFromTemplateReturn) {
            this.CreateFromTemplateReturn = CreateFromTemplateReturn;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface VCManagerChannel : VMCloud.VCManager.VCManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VCManagerClient : System.ServiceModel.ClientBase<VMCloud.VCManager.VCManager>, VMCloud.VCManager.VCManager {
        
        public VCManagerClient() {
        }
        
        public VCManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VCManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VCManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VCManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetVMInfo(string name) {
            return base.Channel.GetVMInfo(name);
        }
        
        public System.Threading.Tasks.Task<string> GetVMInfoAsync(string name) {
            return base.Channel.GetVMInfoAsync(name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        VMCloud.VCManager.AddUserResponse VMCloud.VCManager.VCManager.AddUser(VMCloud.VCManager.AddUserRequest request) {
            return base.Channel.AddUser(request);
        }
        
        public string AddUser(string[] user, string[] pass) {
            VMCloud.VCManager.AddUserRequest inValue = new VMCloud.VCManager.AddUserRequest();
            inValue.user = user;
            inValue.pass = pass;
            VMCloud.VCManager.AddUserResponse retVal = ((VMCloud.VCManager.VCManager)(this)).AddUser(inValue);
            return retVal.AddUserReturn;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<VMCloud.VCManager.AddUserResponse> VMCloud.VCManager.VCManager.AddUserAsync(VMCloud.VCManager.AddUserRequest request) {
            return base.Channel.AddUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<VMCloud.VCManager.AddUserResponse> AddUserAsync(string[] user, string[] pass) {
            VMCloud.VCManager.AddUserRequest inValue = new VMCloud.VCManager.AddUserRequest();
            inValue.user = user;
            inValue.pass = pass;
            return ((VMCloud.VCManager.VCManager)(this)).AddUserAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        VMCloud.VCManager.GetVMUserResponse VMCloud.VCManager.VCManager.GetVMUser(VMCloud.VCManager.GetVMUserRequest request) {
            return base.Channel.GetVMUser(request);
        }
        
        public string GetVMUser(string[] machineNames) {
            VMCloud.VCManager.GetVMUserRequest inValue = new VMCloud.VCManager.GetVMUserRequest();
            inValue.machineNames = machineNames;
            VMCloud.VCManager.GetVMUserResponse retVal = ((VMCloud.VCManager.VCManager)(this)).GetVMUser(inValue);
            return retVal.GetVMUserReturn;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<VMCloud.VCManager.GetVMUserResponse> VMCloud.VCManager.VCManager.GetVMUserAsync(VMCloud.VCManager.GetVMUserRequest request) {
            return base.Channel.GetVMUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<VMCloud.VCManager.GetVMUserResponse> GetVMUserAsync(string[] machineNames) {
            VMCloud.VCManager.GetVMUserRequest inValue = new VMCloud.VCManager.GetVMUserRequest();
            inValue.machineNames = machineNames;
            return ((VMCloud.VCManager.VCManager)(this)).GetVMUserAsync(inValue);
        }
        
        public string LinkClone(string deskName, string hostName, string diskName, string number) {
            return base.Channel.LinkClone(deskName, hostName, diskName, number);
        }
        
        public System.Threading.Tasks.Task<string> LinkCloneAsync(string deskName, string hostName, string diskName, string number) {
            return base.Channel.LinkCloneAsync(deskName, hostName, diskName, number);
        }
        
        public string AssignUser(string desk, string machine, string user) {
            return base.Channel.AssignUser(desk, machine, user);
        }
        
        public System.Threading.Tasks.Task<string> AssignUserAsync(string desk, string machine, string user) {
            return base.Channel.AssignUserAsync(desk, machine, user);
        }
        
        public string BasicOps(string vmName, string Op) {
            return base.Channel.BasicOps(vmName, Op);
        }
        
        public System.Threading.Tasks.Task<string> BasicOpsAsync(string vmName, string Op) {
            return base.Channel.BasicOpsAsync(vmName, Op);
        }
        
        public string OVFExport(string vmName, string host, string localpath) {
            return base.Channel.OVFExport(vmName, host, localpath);
        }
        
        public System.Threading.Tasks.Task<string> OVFExportAsync(string vmName, string host, string localpath) {
            return base.Channel.OVFExportAsync(vmName, host, localpath);
        }
        
        public string GetStorageInfo() {
            return base.Channel.GetStorageInfo();
        }
        
        public System.Threading.Tasks.Task<string> GetStorageInfoAsync() {
            return base.Channel.GetStorageInfoAsync();
        }
        
        public string GetVMList(string adminID, string studentID, string teacherID, string isExperimental) {
            return base.Channel.GetVMList(adminID, studentID, teacherID, isExperimental);
        }
        
        public System.Threading.Tasks.Task<string> GetVMListAsync(string adminID, string studentID, string teacherID, string isExperimental) {
            return base.Channel.GetVMListAsync(adminID, studentID, teacherID, isExperimental);
        }
        
        public string ExportVM(string vmName, string targetDir) {
            return base.Channel.ExportVM(vmName, targetDir);
        }
        
        public System.Threading.Tasks.Task<string> ExportVMAsync(string vmName, string targetDir) {
            return base.Channel.ExportVMAsync(vmName, targetDir);
        }
        
        public string GetHostInfo() {
            return base.Channel.GetHostInfo();
        }
        
        public System.Threading.Tasks.Task<string> GetHostInfoAsync() {
            return base.Channel.GetHostInfoAsync();
        }
        
        public string SnapShotOps(string vmName, string op, string snapshotname, string desc, string removechild) {
            return base.Channel.SnapShotOps(vmName, op, snapshotname, desc, removechild);
        }
        
        public System.Threading.Tasks.Task<string> SnapShotOpsAsync(string vmName, string op, string snapshotname, string desc, string removechild) {
            return base.Channel.SnapShotOpsAsync(vmName, op, snapshotname, desc, removechild);
        }
        
        public string ChangeConfig(string vmName, string cpuNum, string memoryMb, string diskName, string diskSizeMb, string diskMode, string adminID, string studentID, string teacherID, string isExperimental) {
            return base.Channel.ChangeConfig(vmName, cpuNum, memoryMb, diskName, diskSizeMb, diskMode, adminID, studentID, teacherID, isExperimental);
        }
        
        public System.Threading.Tasks.Task<string> ChangeConfigAsync(string vmName, string cpuNum, string memoryMb, string diskName, string diskSizeMb, string diskMode, string adminID, string studentID, string teacherID, string isExperimental) {
            return base.Channel.ChangeConfigAsync(vmName, cpuNum, memoryMb, diskName, diskSizeMb, diskMode, adminID, studentID, teacherID, isExperimental);
        }
        
        public string GetLicenseInfo() {
            return base.Channel.GetLicenseInfo();
        }
        
        public System.Threading.Tasks.Task<string> GetLicenseInfoAsync() {
            return base.Channel.GetLicenseInfoAsync();
        }
        
        public string RunGuestProgram(string vmName, string fileDir, string args) {
            return base.Channel.RunGuestProgram(vmName, fileDir, args);
        }
        
        public System.Threading.Tasks.Task<string> RunGuestProgramAsync(string vmName, string fileDir, string args) {
            return base.Channel.RunGuestProgramAsync(vmName, fileDir, args);
        }
        
        public string UploadFile(string vmName, string username, string password, string guestType, string host, string filePathLocal, string filePathInGuest) {
            return base.Channel.UploadFile(vmName, username, password, guestType, host, filePathLocal, filePathInGuest);
        }
        
        public System.Threading.Tasks.Task<string> UploadFileAsync(string vmName, string username, string password, string guestType, string host, string filePathLocal, string filePathInGuest) {
            return base.Channel.UploadFileAsync(vmName, username, password, guestType, host, filePathLocal, filePathInGuest);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        VMCloud.VCManager.CreateFromTemplateResponse VMCloud.VCManager.VCManager.CreateFromTemplate(VMCloud.VCManager.CreateFromTemplateRequest request) {
            return base.Channel.CreateFromTemplate(request);
        }
        
        public string CreateFromTemplate(string templateName, string[] vmNameList, string adminID, string[] studentIDList, string teacherID, string isExperimental, string cpuNum, string memoryMb, string diskSizeMb, string hostName, string IPAddress) {
            VMCloud.VCManager.CreateFromTemplateRequest inValue = new VMCloud.VCManager.CreateFromTemplateRequest();
            inValue.templateName = templateName;
            inValue.vmNameList = vmNameList;
            inValue.adminID = adminID;
            inValue.studentIDList = studentIDList;
            inValue.teacherID = teacherID;
            inValue.isExperimental = isExperimental;
            inValue.cpuNum = cpuNum;
            inValue.memoryMb = memoryMb;
            inValue.diskSizeMb = diskSizeMb;
            inValue.hostName = hostName;
            inValue.IPAddress = IPAddress;
            VMCloud.VCManager.CreateFromTemplateResponse retVal = ((VMCloud.VCManager.VCManager)(this)).CreateFromTemplate(inValue);
            return retVal.CreateFromTemplateReturn;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<VMCloud.VCManager.CreateFromTemplateResponse> VMCloud.VCManager.VCManager.CreateFromTemplateAsync(VMCloud.VCManager.CreateFromTemplateRequest request) {
            return base.Channel.CreateFromTemplateAsync(request);
        }
        
        public System.Threading.Tasks.Task<VMCloud.VCManager.CreateFromTemplateResponse> CreateFromTemplateAsync(string templateName, string[] vmNameList, string adminID, string[] studentIDList, string teacherID, string isExperimental, string cpuNum, string memoryMb, string diskSizeMb, string hostName, string IPAddress) {
            VMCloud.VCManager.CreateFromTemplateRequest inValue = new VMCloud.VCManager.CreateFromTemplateRequest();
            inValue.templateName = templateName;
            inValue.vmNameList = vmNameList;
            inValue.adminID = adminID;
            inValue.studentIDList = studentIDList;
            inValue.teacherID = teacherID;
            inValue.isExperimental = isExperimental;
            inValue.cpuNum = cpuNum;
            inValue.memoryMb = memoryMb;
            inValue.diskSizeMb = diskSizeMb;
            inValue.hostName = hostName;
            inValue.IPAddress = IPAddress;
            return ((VMCloud.VCManager.VCManager)(this)).CreateFromTemplateAsync(inValue);
        }
        
        public string ConvertToTemplate(string vmName) {
            return base.Channel.ConvertToTemplate(vmName);
        }
        
        public System.Threading.Tasks.Task<string> ConvertToTemplateAsync(string vmName) {
            return base.Channel.ConvertToTemplateAsync(vmName);
        }
        
        public string AddHostToDataCenter(string userName, string password, string ipOrName) {
            return base.Channel.AddHostToDataCenter(userName, password, ipOrName);
        }
        
        public System.Threading.Tasks.Task<string> AddHostToDataCenterAsync(string userName, string password, string ipOrName) {
            return base.Channel.AddHostToDataCenterAsync(userName, password, ipOrName);
        }
        
        public string ChangePasswordForUser(string user, string password) {
            return base.Channel.ChangePasswordForUser(user, password);
        }
        
        public System.Threading.Tasks.Task<string> ChangePasswordForUserAsync(string user, string password) {
            return base.Channel.ChangePasswordForUserAsync(user, password);
        }
        
        public string ConvertToVirtualMachine(string vmName, string hostname, string ipaddress) {
            return base.Channel.ConvertToVirtualMachine(vmName, hostname, ipaddress);
        }
        
        public System.Threading.Tasks.Task<string> ConvertToVirtualMachineAsync(string vmName, string hostname, string ipaddress) {
            return base.Channel.ConvertToVirtualMachineAsync(vmName, hostname, ipaddress);
        }
    }
}
